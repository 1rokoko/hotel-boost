#!/usr/bin/env python3
"""
Test New Sections - –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–π AI Configuration –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
"""

import asyncio
from playwright.async_api import async_playwright

async def test_new_sections():
    """–¢–µ—Å—Ç –Ω–æ–≤–æ–π AI Configuration —Å–µ–∫—Ü–∏–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"""
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=False)
        page = await browser.new_page()
        
        print("üß™ –¢–ï–°–¢ –ù–û–í–´–• –°–ï–ö–¶–ò–ô –ò –§–£–ù–ö–¶–ò–û–ù–ê–õ–ê")
        print("=" * 60)
        
        try:
            await page.goto("http://localhost:8000/api/v1/admin/dashboard")
            await page.wait_for_load_state('networkidle')
            print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
            # –ó–ê–î–ê–ß–ê 1: –¢–µ—Å—Ç –Ω–æ–≤–æ–π AI Configuration —Å–µ–∫—Ü–∏–∏
            print("\nüß† –ó–ê–î–ê–ß–ê 1: –¢–ï–°–¢ AI CONFIGURATION")
            print("-" * 40)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é –µ—Å—Ç—å
            ai_config_link = await page.query_selector('a[data-section="deepseek-config"]')
            if ai_config_link:
                print("‚úÖ –ù–æ–≤—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é 'AI Configuration' –Ω–∞–π–¥–µ–Ω")
                
                # –ö–ª–∏–∫–∞–µ–º –Ω–∞ –Ω–æ–≤—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é
                await ai_config_link.click()
                await page.wait_for_timeout(1000)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ–∫—Ü–∏–∏
                ai_config_info = await page.evaluate('''
                    () => {
                        const section = document.getElementById('deepseek-config-section');
                        if (!section) return null;
                        
                        const rect = section.getBoundingClientRect();
                        const style = window.getComputedStyle(section);
                        
                        return {
                            display: style.display,
                            left: rect.left,
                            top: rect.top,
                            width: rect.width,
                            height: rect.height,
                            properlyPositioned: rect.left >= 250,
                            noWhiteSpace: rect.top < 200
                        };
                    }
                ''')
                
                if ai_config_info:
                    print(f"üìä AI Configuration —Å–µ–∫—Ü–∏—è:")
                    print(f"   Display: {ai_config_info['display']}")
                    print(f"   Left: {ai_config_info['left']}px")
                    print(f"   Top: {ai_config_info['top']}px")
                    print(f"   –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞: {'‚úÖ' if ai_config_info['properlyPositioned'] else '‚ùå'}")
                    print(f"   –ù–µ—Ç –±–µ–ª–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞: {'‚úÖ' if ai_config_info['noWhiteSpace'] else '‚ùå'}")
                    
                    if ai_config_info['properlyPositioned'] and ai_config_info['noWhiteSpace']:
                        print("üéâ AI Configuration —Ä–∞–±–æ—Ç–∞–µ—Ç –ò–î–ï–ê–õ–¨–ù–û!")
                    else:
                        print("‚ùå AI Configuration –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã
                form_elements = await page.evaluate('''
                    () => {
                        const elements = {
                            apiKey: document.getElementById('ai-api-key'),
                            model: document.getElementById('ai-model'),
                            maxTokens: document.getElementById('ai-max-tokens'),
                            temperature: document.getElementById('ai-temperature'),
                            systemPrompt: document.getElementById('ai-system-prompt'),
                            saveButton: document.querySelector('button[onclick="saveAIConfig()"]'),
                            testButton: document.querySelector('button[onclick="testAIConnection()"]')
                        };
                        
                        const results = {};
                        for (const [key, element] of Object.entries(elements)) {
                            results[key] = {
                                found: !!element,
                                visible: element ? element.offsetWidth > 0 && element.offsetHeight > 0 : false
                            };
                        }
                        
                        return results;
                    }
                ''')
                
                print(f"\nüìã –≠–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã AI Configuration:")
                all_elements_ok = True
                for element_name, info in form_elements.items():
                    status = "‚úÖ –û–ö" if info['found'] and info['visible'] else "‚ùå –ü–†–û–ë–õ–ï–ú–ê"
                    print(f"   {element_name}: {status}")
                    if not (info['found'] and info['visible']):
                        all_elements_ok = False
                
                if all_elements_ok:
                    print("üéâ –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
                
                # –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
                print(f"\nüß™ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ AI Configuration:")
                
                # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
                await page.fill('#ai-api-key', 'test-api-key-12345')
                await page.select_option('#ai-model', 'deepseek-chat')
                await page.fill('#ai-max-tokens', '1500')
                await page.fill('#test-message', 'Hello, I need help with my booking')
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º AI Response
                await page.click('button[onclick="testAIResponse()"]')
                await page.wait_for_timeout(2000)
                
                ai_response = await page.text_content('#ai-response-output')
                if 'AI Assistant:' in ai_response:
                    print("‚úÖ AI Response —Ç–µ—Å—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
                else:
                    print("‚ùå AI Response —Ç–µ—Å—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                
            else:
                print("‚ùå –ù–æ–≤—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é 'AI Configuration' –ù–ï –Ω–∞–π–¥–µ–Ω")
            
            # –ó–ê–î–ê–ß–ê 2: –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
            print("\n‚ö° –ó–ê–î–ê–ß–ê 2: –¢–ï–°–¢ –§–£–ù–ö–¶–ò–û–ù–ê–õ–ê –¢–†–ò–ì–ì–ï–†–û–í")
            print("-" * 40)
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–µ–∫—Ü–∏—é —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
            triggers_link = await page.query_selector('a[data-section="triggers"]')
            if triggers_link:
                print("‚úÖ –ü—É–Ω–∫—Ç –º–µ–Ω—é 'Triggers' –Ω–∞–π–¥–µ–Ω")
                
                await triggers_link.click()
                await page.wait_for_timeout(2000)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
                triggers_info = await page.evaluate('''
                    () => {
                        const section = document.getElementById('triggers-section');
                        if (!section) return null;
                        
                        const rect = section.getBoundingClientRect();
                        const style = window.getComputedStyle(section);
                        
                        return {
                            display: style.display,
                            left: rect.left,
                            properlyPositioned: rect.left >= 250
                        };
                    }
                ''')
                
                if triggers_info:
                    print(f"üìä Triggers —Å–µ–∫—Ü–∏—è:")
                    print(f"   Display: {triggers_info['display']}")
                    print(f"   Left: {triggers_info['left']}px")
                    print(f"   –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞: {'‚úÖ' if triggers_info['properlyPositioned'] else '‚ùå'}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏
                trigger_elements = await page.evaluate('''
                    () => {
                        const elements = {
                            createButton: document.querySelector('button[onclick="showCreateTriggerModal()"]'),
                            triggersList: document.getElementById('triggers-list'),
                            typeFilter: document.getElementById('trigger-type-filter')
                        };
                        
                        const results = {};
                        for (const [key, element] of Object.entries(elements)) {
                            results[key] = {
                                found: !!element,
                                visible: element ? element.offsetWidth > 0 && element.offsetHeight > 0 : false
                            };
                        }
                        
                        return results;
                    }
                ''')
                
                print(f"\nüìã –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏:")
                triggers_elements_ok = True
                for element_name, info in trigger_elements.items():
                    status = "‚úÖ –û–ö" if info['found'] and info['visible'] else "‚ùå –ü–†–û–ë–õ–ï–ú–ê"
                    print(f"   {element_name}: {status}")
                    if not (info['found'] and info['visible']):
                        triggers_elements_ok = False
                
                # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞
                create_button = await page.query_selector('button[onclick="showCreateTriggerModal()"]')
                if create_button:
                    print(f"\nüß™ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞:")
                    await create_button.click()
                    await page.wait_for_timeout(1000)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã–ª–æ—Å—å
                    modal = await page.query_selector('#createTriggerModal')
                    if modal:
                        print("‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ –æ—Ç–∫—Ä—ã–ª–æ—Å—å")
                        
                        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                        close_button = await page.query_selector('#createTriggerModal .btn-close')
                        if close_button:
                            await close_button.click()
                            await page.wait_for_timeout(500)
                    else:
                        print("‚ùå –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ –ù–ï –æ—Ç–∫—Ä—ã–ª–æ—Å—å")
                
                if triggers_elements_ok:
                    print("üéâ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                else:
                    print("‚ö†Ô∏è –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
                    
            else:
                print("‚ùå –ü—É–Ω–∫—Ç –º–µ–Ω—é 'Triggers' –ù–ï –Ω–∞–π–¥–µ–Ω")
            
            # –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê
            print(f"\n" + "=" * 60)
            print("üèÜ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê")
            print("=" * 60)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–µ –∑–∞–¥–∞—á–∏
            task1_success = ai_config_info and ai_config_info['properlyPositioned'] and ai_config_info['noWhiteSpace']
            task2_success = triggers_info and triggers_info['properlyPositioned'] and triggers_elements_ok
            
            print(f"üìã –ó–∞–¥–∞—á–∞ 1 (AI Configuration): {'üéâ –í–´–ü–û–õ–ù–ï–ù–ê' if task1_success else '‚ùå –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò'}")
            print(f"üìã –ó–∞–¥–∞—á–∞ 2 (–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤): {'üéâ –í–´–ü–û–õ–ù–ï–ù–ê' if task2_success else '‚ùå –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò'}")
            
            if task1_success and task2_success:
                print(f"\nüéâüéâüéâ –û–ë–ï –ó–ê–î–ê–ß–ò –í–´–ü–û–õ–ù–ï–ù–´ –£–°–ü–ï–®–ù–û! üéâüéâüéâ")
                print("‚úÖ AI Configuration —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å—Ç–∫–æ–π")
                print("‚úÖ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                print(f"\n‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –ó–ê–î–ê–ß–ò –¢–†–ï–ë–£–Æ–¢ –î–û–†–ê–ë–û–¢–ö–ò")
            
            # –°–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            await page.screenshot(path="new_sections_test.png", full_page=True)
            print(f"\nüì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: new_sections_test.png")
            
            await page.wait_for_timeout(5000)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        finally:
            await browser.close()

if __name__ == "__main__":
    asyncio.run(test_new_sections())
