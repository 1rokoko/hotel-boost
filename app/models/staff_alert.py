"""
Staff alert models for sentiment monitoring
"""

import uuid
from datetime import datetime
from enum import Enum
from typing import Optional

from sqlalchemy import Column, String, Text, Boolean, Float, DateTime, ForeignKey, JSON, Index
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.orm import relationship

from app.models.base import TenantAuditableModel


class AlertType(Enum):
    """Types of staff alerts"""
    NEGATIVE_SENTIMENT = "negative_sentiment"
    CRITICAL_SENTIMENT = "critical_sentiment"
    REPEATED_NEGATIVE = "repeated_negative"
    ESCALATION_REQUIRED = "escalation_required"
    GUEST_COMPLAINT = "guest_complaint"
    SERVICE_ISSUE = "service_issue"
    URGENT_ATTENTION = "urgent_attention"


class AlertStatus(Enum):
    """Status of staff alerts"""
    PENDING = "pending"
    ACKNOWLEDGED = "acknowledged"
    IN_PROGRESS = "in_progress"
    RESOLVED = "resolved"
    DISMISSED = "dismissed"
    ESCALATED = "escalated"


class AlertPriority(Enum):
    """Priority levels for alerts"""
    LOW = 1
    MEDIUM = 2
    HIGH = 3
    CRITICAL = 4
    URGENT = 5


class StaffAlert(TenantAuditableModel):
    """Model for staff alerts triggered by sentiment analysis"""
    
    __tablename__ = "staff_alerts"
    
    # Primary identification
    id = Column(
        UUID(as_uuid=True),
        primary_key=True,
        default=uuid.uuid4,
        comment="Unique alert identifier"
    )
    
    # Alert classification
    alert_type = Column(
        String(50),
        nullable=False,
        index=True,
        comment="Type of alert (negative_sentiment, critical_sentiment, etc.)"
    )
    
    priority = Column(
        String(20),
        nullable=False,
        index=True,
        comment="Alert priority level (low, medium, high, critical, urgent)"
    )
    
    status = Column(
        String(20),
        nullable=False,
        default=AlertStatus.PENDING.value,
        index=True,
        comment="Current status of the alert"
    )
    
    # Related entities
    message_id = Column(
        UUID(as_uuid=True),
        ForeignKey("messages.id", ondelete="CASCADE"),
        nullable=False,
        index=True,
        comment="Message that triggered the alert"
    )
    
    guest_id = Column(
        UUID(as_uuid=True),
        ForeignKey("guests.id", ondelete="CASCADE"),
        nullable=False,
        index=True,
        comment="Guest associated with the alert"
    )
    
    conversation_id = Column(
        UUID(as_uuid=True),
        ForeignKey("conversations.id", ondelete="CASCADE"),
        nullable=True,
        index=True,
        comment="Conversation context"
    )
    
    sentiment_analysis_id = Column(
        UUID(as_uuid=True),
        ForeignKey("sentiment_analyses.id", ondelete="CASCADE"),
        nullable=True,
        index=True,
        comment="Related sentiment analysis"
    )
    
    # Alert content
    title = Column(
        String(200),
        nullable=False,
        comment="Alert title/summary"
    )
    
    description = Column(
        Text,
        nullable=False,
        comment="Detailed alert description"
    )
    
    # Sentiment context
    sentiment_score = Column(
        Float,
        nullable=True,
        comment="Sentiment score that triggered the alert"
    )
    
    sentiment_type = Column(
        String(50),
        nullable=True,
        comment="Type of sentiment detected"
    )
    
    # Alert metadata
    urgency_level = Column(
        Float,
        nullable=False,
        default=1,
        comment="Urgency level from 1-5"
    )
    
    auto_generated = Column(
        Boolean,
        nullable=False,
        default=True,
        comment="Whether alert was auto-generated by AI"
    )
    
    # Response tracking
    response_required_by = Column(
        DateTime,
        nullable=True,
        comment="Deadline for response"
    )
    
    acknowledged_at = Column(
        DateTime,
        nullable=True,
        comment="When alert was acknowledged"
    )
    
    acknowledged_by = Column(
        String(100),
        nullable=True,
        comment="Staff member who acknowledged alert"
    )
    
    resolved_at = Column(
        DateTime,
        nullable=True,
        comment="When alert was resolved"
    )
    
    resolved_by = Column(
        String(100),
        nullable=True,
        comment="Staff member who resolved alert"
    )
    
    # Additional context
    context_data = Column(
        JSON,
        nullable=True,
        comment="Additional context data for the alert"
    )
    
    tags = Column(
        JSON,
        nullable=True,
        comment="Tags for categorizing alerts"
    )
    
    # Notification tracking
    notifications_sent = Column(
        JSON,
        nullable=True,
        comment="Record of notifications sent for this alert"
    )
    
    escalation_history = Column(
        JSON,
        nullable=True,
        comment="History of escalations for this alert"
    )
    
    # Correlation tracking
    correlation_id = Column(
        String(100),
        nullable=True,
        index=True,
        comment="Correlation ID for tracking related operations"
    )
    
    # Relationships
    message = relationship("Message", back_populates="staff_alerts")
    guest = relationship("Guest", back_populates="staff_alerts")
    conversation = relationship("Conversation", back_populates="staff_alerts")
    sentiment_analysis = relationship("SentimentAnalysis", back_populates="staff_alerts")
    
    # Indexes for performance
    __table_args__ = (
        Index('idx_staff_alert_hotel_status', 'hotel_id', 'status'),
        Index('idx_staff_alert_priority_created', 'priority', 'created_at'),
        Index('idx_staff_alert_guest_type', 'guest_id', 'alert_type'),
        Index('idx_staff_alert_urgency_status', 'urgency_level', 'status'),
        Index('idx_staff_alert_response_deadline', 'response_required_by'),
        Index('idx_staff_alert_correlation', 'correlation_id'),
    )
    
    def __repr__(self):
        return f"<StaffAlert(id={self.id}, type={self.alert_type}, priority={self.priority}, status={self.status})>"
    
    @property
    def is_overdue(self) -> bool:
        """Check if alert response is overdue"""
        if not self.response_required_by:
            return False
        return datetime.utcnow() > self.response_required_by and self.status == AlertStatus.PENDING.value
    
    @property
    def response_time_minutes(self) -> Optional[int]:
        """Calculate response time in minutes"""
        if not self.acknowledged_at:
            return None
        delta = self.acknowledged_at - self.created_at
        return int(delta.total_seconds() / 60)
    
    @property
    def resolution_time_minutes(self) -> Optional[int]:
        """Calculate resolution time in minutes"""
        if not self.resolved_at:
            return None
        delta = self.resolved_at - self.created_at
        return int(delta.total_seconds() / 60)


class AlertEscalation(TenantAuditableModel):
    """Model for tracking alert escalations"""
    
    __tablename__ = "alert_escalations"
    
    # Primary identification
    id = Column(
        UUID(as_uuid=True),
        primary_key=True,
        default=uuid.uuid4,
        comment="Unique escalation identifier"
    )
    
    # Related alert
    alert_id = Column(
        UUID(as_uuid=True),
        ForeignKey("staff_alerts.id", ondelete="CASCADE"),
        nullable=False,
        index=True,
        comment="Alert being escalated"
    )
    
    # Escalation details
    escalation_level = Column(
        String(20),
        nullable=False,
        comment="Level of escalation (supervisor, manager, director)"
    )
    
    escalated_to = Column(
        String(100),
        nullable=False,
        comment="Person or role escalated to"
    )
    
    escalated_by = Column(
        String(100),
        nullable=True,
        comment="Person who initiated escalation"
    )
    
    reason = Column(
        Text,
        nullable=False,
        comment="Reason for escalation"
    )
    
    # Status tracking
    status = Column(
        String(20),
        nullable=False,
        default="pending",
        comment="Status of escalation"
    )
    
    acknowledged_at = Column(
        DateTime,
        nullable=True,
        comment="When escalation was acknowledged"
    )
    
    resolved_at = Column(
        DateTime,
        nullable=True,
        comment="When escalation was resolved"
    )
    
    # Additional context
    escalation_data = Column(
        JSON,
        nullable=True,
        comment="Additional escalation context"
    )
    
    # Relationships
    alert = relationship("StaffAlert", back_populates="escalations")
    
    # Indexes
    __table_args__ = (
        Index('idx_escalation_alert_level', 'alert_id', 'escalation_level'),
        Index('idx_escalation_status_created', 'status', 'created_at'),
    )


# Add relationship to StaffAlert
StaffAlert.escalations = relationship("AlertEscalation", back_populates="alert", cascade="all, delete-orphan")
