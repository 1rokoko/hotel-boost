#!/usr/bin/env python3
"""
Final Layout Test - –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤–µ—Ä—Å—Ç–∫–∏
"""

import asyncio
from playwright.async_api import async_playwright

async def final_layout_test():
    """–ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤–µ—Ä—Å—Ç–∫–∏"""
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=False)
        page = await browser.new_page()
        
        print("üéØ –ò–¢–û–ì–û–í–´–ô –¢–ï–°–¢ –í–ï–†–°–¢–ö–ò –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–ò")
        print("=" * 60)
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            await page.goto("http://localhost:8000/api/v1/admin/dashboard")
            await page.wait_for_load_state('networkidle')
            print("‚úÖ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Dashboard –∞–∫—Ç–∏–≤–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            dashboard_active = await page.evaluate('''
                () => {
                    const dashboardSection = document.getElementById('dashboard-section');
                    const dashboardNav = document.querySelector('a[data-section="dashboard"]');
                    
                    return {
                        sectionVisible: dashboardSection && window.getComputedStyle(dashboardSection).display === 'block',
                        navActive: dashboardNav && dashboardNav.classList.contains('active')
                    };
                }
            ''')
            
            print(f"üè† Dashboard –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {'‚úÖ –ê–ö–¢–ò–í–ï–ù' if dashboard_active['sectionVisible'] and dashboard_active['navActive'] else '‚ùå –ù–ï –ê–ö–¢–ò–í–ï–ù'}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ DeepSeek Settings
            print("\nüß† –¢–µ—Å—Ç–∏—Ä—É–µ–º DeepSeek Settings...")
            await page.click('a[data-section="deepseek-settings"]')
            await page.wait_for_timeout(1000)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º DeepSeek Settings
            deepseek_status = await page.evaluate('''
                () => {
                    const section = document.getElementById('deepseek-settings-section');
                    if (!section) return { found: false };
                    
                    const style = window.getComputedStyle(section);
                    const rect = section.getBoundingClientRect();
                    
                    return {
                        found: true,
                        visible: style.display === 'block',
                        hasActiveClass: section.classList.contains('active'),
                        left: rect.left,
                        width: rect.width,
                        height: rect.height,
                        properlyPositioned: rect.left >= 250
                    };
                }
            ''')
            
            if deepseek_status['found']:
                print(f"   üìç –°–µ–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞: ‚úÖ")
                print(f"   üëÅÔ∏è –í–∏–¥–∏–º–æ—Å—Ç—å: {'‚úÖ' if deepseek_status['visible'] else '‚ùå'}")
                print(f"   üéØ Active –∫–ª–∞—Å—Å: {'‚úÖ' if deepseek_status['hasActiveClass'] else '‚ùå'}")
                print(f"   üìê –ü–æ–∑–∏—Ü–∏—è (left): {deepseek_status['left']}px")
                print(f"   üìè –®–∏—Ä–∏–Ω–∞: {deepseek_status['width']}px")
                print(f"   üìê –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {'‚úÖ' if deepseek_status['properlyPositioned'] else '‚ùå'}")
            else:
                print("   ‚ùå –°–µ–∫—Ü–∏—è DeepSeek Settings –ù–ï –Ω–∞–π–¥–µ–Ω–∞!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã
            form_elements = await page.evaluate('''
                () => {
                    const elements = {
                        apiKey: document.getElementById('deepseek-api-key'),
                        model: document.getElementById('deepseek-model'),
                        travelMemory: document.getElementById('deepseek-travel-memory'),
                        saveButton: document.querySelector('button:has-text("Save Settings")')
                    };
                    
                    const results = {};
                    for (const [key, element] of Object.entries(elements)) {
                        if (element) {
                            const rect = element.getBoundingClientRect();
                            results[key] = {
                                found: true,
                                visible: rect.width > 0 && rect.height > 0,
                                left: rect.left,
                                width: rect.width
                            };
                        } else {
                            results[key] = { found: false };
                        }
                    }
                    
                    return results;
                }
            ''')
            
            print(f"\nüîç –≠–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã:")
            for element_name, status in form_elements.items():
                if status['found']:
                    print(f"   {element_name}: ‚úÖ –Ω–∞–π–¥–µ–Ω, –≤–∏–¥–∏–º: {'‚úÖ' if status['visible'] else '‚ùå'}, left: {status['left']}px")
                else:
                    print(f"   {element_name}: ‚ùå –ù–ï –Ω–∞–π–¥–µ–Ω")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ —Å–µ–∫—Ü–∏–∏
            print(f"\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Å–µ–∫—Ü–∏—è–º–∏...")
            
            sections_to_test = ['hotels', 'conversations', 'triggers', 'templates']
            for section in sections_to_test:
                await page.click(f'a[data-section="{section}"]')
                await page.wait_for_timeout(500)
                
                section_visible = await page.evaluate(f'''
                    () => {{
                        const section = document.getElementById('{section}-section');
                        return section && window.getComputedStyle(section).display === 'block';
                    }}
                ''')
                
                print(f"   {section}: {'‚úÖ' if section_visible else '‚ùå'}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ DeepSeek Settings –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            await page.click('a[data-section="deepseek-settings"]')
            await page.wait_for_timeout(1000)
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ DeepSeek Settings
            final_check = await page.evaluate('''
                () => {
                    const section = document.getElementById('deepseek-settings-section');
                    const apiKey = document.getElementById('deepseek-api-key');
                    const travelMemory = document.getElementById('deepseek-travel-memory');
                    
                    if (!section || !apiKey || !travelMemory) return false;
                    
                    const sectionRect = section.getBoundingClientRect();
                    const apiKeyRect = apiKey.getBoundingClientRect();
                    const travelMemoryRect = travelMemory.getBoundingClientRect();
                    
                    return {
                        sectionVisible: window.getComputedStyle(section).display === 'block',
                        sectionLeft: sectionRect.left,
                        apiKeyVisible: apiKeyRect.width > 0 && apiKeyRect.height > 0,
                        travelMemoryVisible: travelMemoryRect.width > 0 && travelMemoryRect.height > 0,
                        noOverlap: sectionRect.left >= 250
                    };
                }
            ''')
            
            # –î–µ–ª–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
            await page.screenshot(path="final_deepseek_desktop.png", full_page=True)
            print(f"\nüì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –¥–µ—Å–∫—Ç–æ–ø: final_deepseek_desktop.png")
            
            # –¢–µ—Å—Ç –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
            await page.set_viewport_size({"width": 600, "height": 800})
            await page.wait_for_timeout(1000)
            await page.screenshot(path="final_deepseek_mobile.png", full_page=True)
            print(f"üì± –°–∫—Ä–∏–Ω—à–æ—Ç –º–æ–±–∏–ª—å–Ω–∞—è: final_deepseek_mobile.png")
            
            # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
            print(f"\n" + "=" * 60)
            print("üìã –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
            print("=" * 60)
            
            if (final_check and 
                final_check['sectionVisible'] and 
                final_check['noOverlap'] and 
                final_check['apiKeyVisible'] and 
                final_check['travelMemoryVisible']):
                
                print("üéâ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –£–°–ü–ï–®–ù–´!")
                print("‚úÖ DeepSeek Settings –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
                print("‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Å sidebar")
                print("‚úÖ –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã –≤–∏–¥–∏–º—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
                print("‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Å–µ–∫—Ü–∏—è–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                
            else:
                print("‚ö†Ô∏è –û–°–¢–ê–õ–ò–°–¨ –ü–†–û–ë–õ–ï–ú–´ –° –í–ï–†–°–¢–ö–û–ô")
                if final_check:
                    print(f"   - –°–µ–∫—Ü–∏—è –≤–∏–¥–∏–º–∞: {'‚úÖ' if final_check['sectionVisible'] else '‚ùå'}")
                    print(f"   - –ù–µ—Ç –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è: {'‚úÖ' if final_check['noOverlap'] else '‚ùå'}")
                    print(f"   - API Key –≤–∏–¥–∏–º: {'‚úÖ' if final_check['apiKeyVisible'] else '‚ùå'}")
                    print(f"   - Travel Memory –≤–∏–¥–∏–º: {'‚úÖ' if final_check['travelMemoryVisible'] else '‚ùå'}")
                else:
                    print("   - –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–µ–∫—Ü–∏–∏")
            
            print(f"\nüì∏ –°–ö–†–ò–ù–®–û–¢–´ –î–õ–Ø –ü–†–û–í–ï–†–ö–ò:")
            print("   - final_deepseek_desktop.png")
            print("   - final_deepseek_mobile.png")
            
            print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –≤–∏–∑—É–∞–ª—å–Ω–æ")
            print("   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã –¥–æ—Å—Ç—É–ø–Ω—ã")
            print("   3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–∞—Ö —ç–∫—Ä–∞–Ω–∞")
            
            # –ñ–¥–µ–º –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            await page.wait_for_timeout(5000)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        finally:
            await browser.close()

if __name__ == "__main__":
    asyncio.run(final_layout_test())
