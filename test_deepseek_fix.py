#!/usr/bin/env python3
"""
DeepSeek Settings Fix Test - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –±–µ–ª–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è
"""

import asyncio
from playwright.async_api import async_playwright

async def test_deepseek_fix():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π DeepSeek Settings"""
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=False)
        page = await browser.new_page()
        
        print("üîß –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô DEEPSEEK SETTINGS")
        print("=" * 50)
        
        try:
            await page.goto("http://localhost:8000/api/v1/admin/dashboard")
            await page.wait_for_load_state('networkidle')
            print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ DeepSeek Settings —á–µ—Ä–µ–∑ JavaScript
            await page.evaluate('''
                () => {
                    const link = document.querySelector('a[data-section="deepseek-settings"]');
                    if (link) {
                        link.click();
                    }
                }
            ''')
            
            await page.wait_for_timeout(2000)
            print("‚úÖ –ü–µ—Ä–µ—à–ª–∏ –≤ DeepSeek Settings")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏
            section_info = await page.evaluate('''
                () => {
                    const section = document.getElementById('deepseek-settings-section');
                    if (!section) return null;
                    
                    const rect = section.getBoundingClientRect();
                    const style = window.getComputedStyle(section);
                    
                    return {
                        display: style.display,
                        top: rect.top,
                        left: rect.left,
                        width: rect.width,
                        height: rect.height,
                        paddingTop: style.paddingTop,
                        marginTop: style.marginTop
                    };
                }
            ''')
            
            if section_info:
                print(f"\nüìê –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏:")
                print(f"   - Display: {section_info['display']}")
                print(f"   - Top: {section_info['top']}px")
                print(f"   - Left: {section_info['left']}px")
                print(f"   - Width: {section_info['width']}px")
                print(f"   - Height: {section_info['height']}px")
                print(f"   - Padding Top: {section_info['paddingTop']}")
                print(f"   - Margin Top: {section_info['marginTop']}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã
                has_white_space = section_info['top'] > 100
                overlaps_sidebar = section_info['left'] < 250
                
                print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º:")
                print(f"   - –ë–æ–ª—å—à–æ–µ –±–µ–ª–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ: {'‚ùå –î–ê' if has_white_space else '‚úÖ –ù–ï–¢'}")
                print(f"   - –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ —Å sidebar: {'‚ùå –î–ê' if overlaps_sidebar else '‚úÖ –ù–ï–¢'}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏
            card_header_info = await page.evaluate('''
                () => {
                    const header = document.querySelector('#deepseek-settings-section .card-header h5');
                    if (!header) return null;
                    
                    const rect = header.getBoundingClientRect();
                    return {
                        text: header.textContent.trim(),
                        top: rect.top,
                        left: rect.left,
                        width: rect.width,
                        visible: rect.width > 0 && rect.height > 0
                    };
                }
            ''')
            
            if card_header_info:
                print(f"\nüìã –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏:")
                print(f"   - –¢–µ–∫—Å—Ç: '{card_header_info['text']}'")
                print(f"   - Top: {card_header_info['top']}px")
                print(f"   - Left: {card_header_info['left']}px")
                print(f"   - –í–∏–¥–∏–º–æ—Å—Ç—å: {'‚úÖ –í–ò–î–ò–ú' if card_header_info['visible'] else '‚ùå –ù–ï –í–ò–î–ò–ú'}")
                
                header_overlaps = card_header_info['left'] < 250
                print(f"   - –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ —Å sidebar: {'‚ùå –î–ê' if header_overlaps else '‚úÖ –ù–ï–¢'}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã
            form_fields = await page.evaluate('''
                () => {
                    const fields = [
                        { id: 'deepseek-api-key', name: 'API Key' },
                        { id: 'deepseek-model', name: 'Model' },
                        { id: 'deepseek-max-tokens', name: 'Max Tokens' },
                        { id: 'deepseek-temperature', name: 'Temperature' }
                    ];
                    
                    return fields.map(field => {
                        const element = document.getElementById(field.id);
                        if (!element) return { ...field, found: false };
                        
                        const rect = element.getBoundingClientRect();
                        return {
                            ...field,
                            found: true,
                            top: rect.top,
                            left: rect.left,
                            visible: rect.width > 0 && rect.height > 0,
                            accessible: rect.left >= 250
                        };
                    });
                }
            ''')
            
            print(f"\nüîç –ü–æ–ª—è —Ñ–æ—Ä–º—ã:")
            for field in form_fields:
                if field['found']:
                    status = "‚úÖ" if field['visible'] and field['accessible'] else "‚ùå"
                    print(f"   {status} {field['name']}: top={field['top']}px, left={field['left']}px")
                else:
                    print(f"   ‚ùå {field['name']}: –ù–ï –ù–ê–ô–î–ï–ù–û")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            scroll_info = await page.evaluate('''
                () => {
                    return {
                        scrollTop: window.pageYOffset || document.documentElement.scrollTop,
                        scrollHeight: document.documentElement.scrollHeight,
                        clientHeight: document.documentElement.clientHeight
                    };
                }
            ''')
            
            print(f"\nüìú –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:")
            print(f"   - Scroll Top: {scroll_info['scrollTop']}px")
            print(f"   - Scroll Height: {scroll_info['scrollHeight']}px")
            print(f"   - Client Height: {scroll_info['clientHeight']}px")
            
            # –°–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            await page.screenshot(path="deepseek_fix_test.png", full_page=True)
            print(f"\nüì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: deepseek_fix_test.png")
            
            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–≤–µ—Ä—Ö, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–≤–µ—Ä—Ö—É
            await page.evaluate('window.scrollTo(0, 0)')
            await page.wait_for_timeout(1000)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ—Å–ª–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –≤–≤–µ—Ä—Ö
            top_position = await page.evaluate('''
                () => {
                    const section = document.getElementById('deepseek-settings-section');
                    if (!section) return null;
                    
                    const rect = section.getBoundingClientRect();
                    return rect.top;
                }
            ''')
            
            print(f"\n‚¨ÜÔ∏è –ü–æ—Å–ª–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –≤–≤–µ—Ä—Ö:")
            print(f"   - Top –ø–æ–∑–∏—Ü–∏—è —Å–µ–∫—Ü–∏–∏: {top_position}px")
            
            # –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            await page.screenshot(path="deepseek_fix_scrolled.png", full_page=True)
            print(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏: deepseek_fix_scrolled.png")
            
            # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
            print(f"\n" + "=" * 50)
            print("üìã –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
            print("=" * 50)
            
            if (section_info and 
                not (section_info['top'] > 100) and 
                section_info['left'] >= 250 and 
                card_header_info and 
                card_header_info['left'] >= 250):
                
                print("üéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –£–°–ü–ï–®–ù–´!")
                print("‚úÖ –ë–µ–ª–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–æ")
                print("‚úÖ –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ —Å sidebar –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ")
                print("‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω")
            else:
                print("‚ö†Ô∏è –û–°–¢–ê–õ–ò–°–¨ –ü–†–û–ë–õ–ï–ú–´:")
                if section_info and section_info['top'] > 100:
                    print("   ‚ùå –í—Å–µ –µ—â–µ –µ—Å—Ç—å –±–æ–ª—å—à–æ–µ –±–µ–ª–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ")
                if section_info and section_info['left'] < 250:
                    print("   ‚ùå –°–µ–∫—Ü–∏—è –≤—Å–µ –µ—â–µ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Å sidebar")
                if card_header_info and card_header_info['left'] < 250:
                    print("   ‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤—Å–µ –µ—â–µ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Å sidebar")
            
            print(f"\nüì∏ –°–ö–†–ò–ù–®–û–¢–´ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:")
            print("   - deepseek_fix_test.png (–æ–±—â–∏–π –≤–∏–¥)")
            print("   - deepseek_fix_scrolled.png (–ø–æ—Å–ª–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –≤–≤–µ—Ä—Ö)")
            
            await page.wait_for_timeout(5000)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        finally:
            await browser.close()

if __name__ == "__main__":
    asyncio.run(test_deepseek_fix())
