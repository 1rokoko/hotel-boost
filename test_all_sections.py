#!/usr/bin/env python3
"""
Test All Sections - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å–µ–∫—Ü–∏–π –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
"""

import asyncio
from playwright.async_api import async_playwright

async def test_all_sections():
    """–¢–µ—Å—Ç –≤—Å–µ—Ö —Å–µ–∫—Ü–∏–π –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=False)
        page = await browser.new_page()
        
        print("üîÑ –¢–ï–°–¢ –í–°–ï–• –°–ï–ö–¶–ò–ô –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–ò")
        print("=" * 60)
        
        try:
            await page.goto("http://localhost:8000/api/v1/admin/dashboard")
            await page.wait_for_load_state('networkidle')
            print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
            # –°–ø–∏—Å–æ–∫ —Å–µ–∫—Ü–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            sections_to_test = [
                'dashboard',
                'hotels', 
                'conversations',
                'triggers',
                'templates',
                'deepseek-settings'
            ]
            
            results = {}
            
            for section in sections_to_test:
                print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ–∫—Ü–∏—é: {section}")
                
                # –ö–ª–∏–∫–∞–µ–º –Ω–∞ —Å–µ–∫—Ü–∏—é
                try:
                    await page.evaluate(f'''
                        () => {{
                            const link = document.querySelector('a[data-section="{section}"]');
                            if (link) {{
                                link.click();
                            }}
                        }}
                    ''')
                    
                    await page.wait_for_timeout(1000)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏
                    section_info = await page.evaluate(f'''
                        () => {{
                            const section = document.getElementById('{section}-section');
                            if (!section) return null;
                            
                            const rect = section.getBoundingClientRect();
                            const style = window.getComputedStyle(section);
                            
                            return {{
                                visible: style.display === 'block',
                                hasActiveClass: section.classList.contains('active'),
                                top: rect.top,
                                left: rect.left,
                                width: rect.width,
                                height: rect.height,
                                properlyPositioned: rect.left >= 250
                            }};
                        }}
                    ''')
                    
                    if section_info:
                        status = "‚úÖ –•–û–†–û–®–û" if (section_info['visible'] and 
                                                section_info['properlyPositioned'] and 
                                                section_info['height'] > 0) else "‚ùå –ü–†–û–ë–õ–ï–ú–´"
                        
                        print(f"   –°—Ç–∞—Ç—É—Å: {status}")
                        print(f"   - –í–∏–¥–∏–º–æ—Å—Ç—å: {'‚úÖ' if section_info['visible'] else '‚ùå'}")
                        print(f"   - Active –∫–ª–∞—Å—Å: {'‚úÖ' if section_info['hasActiveClass'] else '‚ùå'}")
                        print(f"   - –ü–æ–∑–∏—Ü–∏—è: left={section_info['left']}px, top={section_info['top']}px")
                        print(f"   - –†–∞–∑–º–µ—Ä: {section_info['width']}px x {section_info['height']}px")
                        print(f"   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {'‚úÖ' if section_info['properlyPositioned'] else '‚ùå'}")
                        
                        results[section] = {
                            'status': 'good' if section_info['visible'] and section_info['properlyPositioned'] and section_info['height'] > 0 else 'bad',
                            'details': section_info
                        }
                    else:
                        print(f"   ‚ùå –°–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                        results[section] = {'status': 'not_found', 'details': None}
                        
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
                    results[section] = {'status': 'error', 'details': str(e)}
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ DeepSeek Settings
            print(f"\nüß† –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê DEEPSEEK SETTINGS:")
            
            await page.evaluate('''
                () => {
                    const link = document.querySelector('a[data-section="deepseek-settings"]');
                    if (link) {
                        link.click();
                    }
                }
            ''')
            
            await page.wait_for_timeout(2000)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã
            form_check = await page.evaluate('''
                () => {
                    const elements = {
                        section: document.getElementById('deepseek-settings-section'),
                        header: document.querySelector('#deepseek-settings-section .card-header h5'),
                        apiKey: document.getElementById('deepseek-api-key'),
                        model: document.getElementById('deepseek-model'),
                        saveButton: document.querySelector('#deepseek-settings-section button')
                    };
                    
                    const results = {};
                    for (const [key, element] of Object.entries(elements)) {
                        if (element) {
                            const rect = element.getBoundingClientRect();
                            results[key] = {
                                found: true,
                                visible: rect.width > 0 && rect.height > 0,
                                left: rect.left,
                                top: rect.top,
                                properlyPositioned: rect.left >= 250,
                                text: element.textContent ? element.textContent.trim().substring(0, 30) : ''
                            };
                        } else {
                            results[key] = { found: false };
                        }
                    }
                    
                    return results;
                }
            ''')
            
            print(f"üìã –≠–ª–µ–º–µ–Ω—Ç—ã DeepSeek Settings:")
            for element_name, info in form_check.items():
                if info['found']:
                    status = "‚úÖ" if info['visible'] and info['properlyPositioned'] else "‚ùå"
                    print(f"   {status} {element_name}: left={info['left']}px, top={info['top']}px")
                    if info['text']:
                        print(f"      –¢–µ–∫—Å—Ç: '{info['text']}'")
                else:
                    print(f"   ‚ùå {element_name}: –ù–ï –ù–ê–ô–î–ï–ù")
            
            # –°–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            await page.screenshot(path="all_sections_test.png", full_page=True)
            print(f"\nüì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: all_sections_test.png")
            
            # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            print(f"\n" + "=" * 60)
            print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–û –í–°–ï–ú –°–ï–ö–¶–ò–Ø–ú")
            print("=" * 60)
            
            good_sections = [s for s, r in results.items() if r['status'] == 'good']
            bad_sections = [s for s, r in results.items() if r['status'] != 'good']
            
            print(f"‚úÖ –†–∞–±–æ—Ç–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ ({len(good_sections)}): {', '.join(good_sections)}")
            if bad_sections:
                print(f"‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã ({len(bad_sections)}): {', '.join(bad_sections)}")
            
            if len(good_sections) == len(sections_to_test):
                print(f"\nüéâ –í–°–ï –°–ï–ö–¶–ò–ò –†–ê–ë–û–¢–ê–Æ–¢ –ü–†–ê–í–ò–õ–¨–ù–û!")
            else:
                print(f"\n‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –°–ï–ö–¶–ò–ò –¢–†–ï–ë–£–Æ–¢ –î–û–†–ê–ë–û–¢–ö–ò")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–±–∏–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é
            print(f"\nüì± –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏...")
            await page.set_viewport_size({"width": 600, "height": 800})
            await page.wait_for_timeout(1000)
            
            mobile_check = await page.evaluate('''
                () => {
                    const section = document.getElementById('deepseek-settings-section');
                    if (!section) return null;
                    
                    const rect = section.getBoundingClientRect();
                    return {
                        left: rect.left,
                        width: rect.width,
                        mobileOk: rect.left >= 0 && rect.width > 500
                    };
                }
            ''')
            
            if mobile_check:
                print(f"   –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: {'‚úÖ –•–û–†–û–®–û' if mobile_check['mobileOk'] else '‚ùå –ü–†–û–ë–õ–ï–ú–´'}")
                print(f"   Left: {mobile_check['left']}px, Width: {mobile_check['width']}px")
            
            await page.screenshot(path="all_sections_mobile.png", full_page=True)
            print(f"üì∏ –ú–æ–±–∏–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç: all_sections_mobile.png")
            
            await page.wait_for_timeout(3000)
            
        except Exception as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            await browser.close()

if __name__ == "__main__":
    asyncio.run(test_all_sections())
