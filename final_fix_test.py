#!/usr/bin/env python3
"""
Final Fix Test - –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
"""

import asyncio
from playwright.async_api import async_playwright

async def final_test():
    """–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=False)
        page = await browser.new_page()
        
        print("üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
        print("=" * 50)
        
        try:
            await page.goto("http://localhost:8000/api/v1/admin/dashboard")
            await page.wait_for_load_state('networkidle')
            print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Dashboard –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            dashboard_check = await page.evaluate('''
                () => {
                    const section = document.getElementById('dashboard-section');
                    if (!section) return null;
                    
                    const rect = section.getBoundingClientRect();
                    const style = window.getComputedStyle(section);
                    
                    return {
                        display: style.display,
                        left: rect.left,
                        width: rect.width,
                        properlyPositioned: rect.left >= 250 || style.display === 'none'
                    };
                }
            ''')
            
            if dashboard_check:
                print(f"üè† Dashboard: {'‚úÖ –û–ö' if dashboard_check['properlyPositioned'] else '‚ùå –ü–†–û–ë–õ–ï–ú–ê'}")
                print(f"   Display: {dashboard_check['display']}, Left: {dashboard_check['left']}px")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ DeepSeek Settings
            print(f"\nüß† –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ DeepSeek Settings...")
            await page.evaluate('''
                () => {
                    const link = document.querySelector('a[data-section="deepseek-settings"]');
                    if (link) link.click();
                }
            ''')
            await page.wait_for_timeout(2000)
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ DeepSeek Settings
            deepseek_analysis = await page.evaluate('''
                () => {
                    const section = document.getElementById('deepseek-settings-section');
                    if (!section) return null;
                    
                    const rect = section.getBoundingClientRect();
                    const style = window.getComputedStyle(section);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                    const header = document.querySelector('#deepseek-settings-section .card-header h5');
                    const apiKey = document.getElementById('deepseek-api-key');
                    
                    const headerRect = header ? header.getBoundingClientRect() : null;
                    const apiKeyRect = apiKey ? apiKey.getBoundingClientRect() : null;
                    
                    return {
                        section: {
                            display: style.display,
                            left: rect.left,
                            top: rect.top,
                            width: rect.width,
                            height: rect.height,
                            properlyPositioned: rect.left >= 250
                        },
                        header: headerRect ? {
                            text: header.textContent.trim(),
                            left: headerRect.left,
                            top: headerRect.top,
                            properlyPositioned: headerRect.left >= 250
                        } : null,
                        apiKey: apiKeyRect ? {
                            left: apiKeyRect.left,
                            top: apiKeyRect.top,
                            properlyPositioned: apiKeyRect.left >= 250
                        } : null
                    };
                }
            ''')
            
            if deepseek_analysis:
                section = deepseek_analysis['section']
                print(f"üìä DeepSeek Settings —Å–µ–∫—Ü–∏—è:")
                print(f"   Display: {section['display']}")
                print(f"   –ü–æ–∑–∏—Ü–∏—è: left={section['left']}px, top={section['top']}px")
                print(f"   –†–∞–∑–º–µ—Ä: {section['width']}px x {section['height']}px")
                print(f"   –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {'‚úÖ' if section['properlyPositioned'] else '‚ùå'}")
                
                if deepseek_analysis['header']:
                    header = deepseek_analysis['header']
                    print(f"\nüìã –ó–∞–≥–æ–ª–æ–≤–æ–∫ '{header['text']}':")
                    print(f"   –ü–æ–∑–∏—Ü–∏—è: left={header['left']}px, top={header['top']}px")
                    print(f"   –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {'‚úÖ' if header['properlyPositioned'] else '‚ùå'}")
                
                if deepseek_analysis['apiKey']:
                    apiKey = deepseek_analysis['apiKey']
                    print(f"\nüîë API Key –ø–æ–ª–µ:")
                    print(f"   –ü–æ–∑–∏—Ü–∏—è: left={apiKey['left']}px, top={apiKey['top']}px")
                    print(f"   –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {'‚úÖ' if apiKey['properlyPositioned'] else '‚ùå'}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
                no_white_space = section['top'] < 200
                no_sidebar_overlap = section['properlyPositioned']
                header_visible = deepseek_analysis['header'] and deepseek_analysis['header']['properlyPositioned']
                
                print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º:")
                print(f"   - –ë–µ–ª–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–æ: {'‚úÖ' if no_white_space else '‚ùå'}")
                print(f"   - –ù–µ—Ç –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è —Å sidebar: {'‚úÖ' if no_sidebar_overlap else '‚ùå'}")
                print(f"   - –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∏–¥–∏–º –ø–æ–ª–Ω–æ—Å—Ç—å—é: {'‚úÖ' if header_visible else '‚ùå'}")
                
                # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
                all_good = no_white_space and no_sidebar_overlap and header_visible
                print(f"\nüéØ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê: {'üéâ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–û!' if all_good else '‚ö†Ô∏è –û–°–¢–ê–õ–ò–°–¨ –ü–†–û–ë–õ–ï–ú–´'}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ —Å–µ–∫—Ü–∏–∏
            print(f"\nüîÑ –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö —Å–µ–∫—Ü–∏–π...")
            other_sections = ['hotels', 'conversations', 'triggers']
            
            for section_name in other_sections:
                await page.evaluate(f'''
                    () => {{
                        const link = document.querySelector('a[data-section="{section_name}"]');
                        if (link) link.click();
                    }}
                ''')
                await page.wait_for_timeout(500)
                
                section_ok = await page.evaluate(f'''
                    () => {{
                        const section = document.getElementById('{section_name}-section');
                        if (!section) return false;
                        
                        const rect = section.getBoundingClientRect();
                        const style = window.getComputedStyle(section);
                        
                        return style.display === 'block' && rect.left >= 250;
                    }}
                ''')
                
                print(f"   {section_name}: {'‚úÖ –û–ö' if section_ok else '‚ùå –ü–†–û–ë–õ–ï–ú–ê'}")
            
            # –°–∫—Ä–∏–Ω—à–æ—Ç—ã
            await page.evaluate('''
                () => {
                    const link = document.querySelector('a[data-section="deepseek-settings"]');
                    if (link) link.click();
                }
            ''')
            await page.wait_for_timeout(1000)
            
            await page.screenshot(path="final_fix_desktop.png", full_page=True)
            print(f"\nüì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –¥–µ—Å–∫—Ç–æ–ø: final_fix_desktop.png")
            
            # –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
            await page.set_viewport_size({"width": 600, "height": 800})
            await page.wait_for_timeout(1000)
            await page.screenshot(path="final_fix_mobile.png", full_page=True)
            print(f"üì± –°–∫—Ä–∏–Ω—à–æ—Ç –º–æ–±–∏–ª—å–Ω–∞—è: final_fix_mobile.png")
            
            print(f"\nüì∏ –°–ö–†–ò–ù–®–û–¢–´ –î–õ–Ø –ü–†–û–í–ï–†–ö–ò:")
            print("   - final_fix_desktop.png")
            print("   - final_fix_mobile.png")
            
            await page.wait_for_timeout(5000)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        finally:
            await browser.close()

if __name__ == "__main__":
    asyncio.run(final_test())
