#!/usr/bin/env python3
"""
Double Verification Test - –î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
"""

import asyncio
from playwright.async_api import async_playwright

async def double_verification():
    """–î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=False)
        page = await browser.new_page()
        
        print("üî• –î–í–û–ô–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")
        print("=" * 60)
        
        try:
            await page.goto("http://localhost:8000/api/v1/admin/dashboard")
            await page.wait_for_load_state('networkidle')
            print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
            # –ü–ï–†–í–ê–Ø –ü–†–û–í–ï–†–ö–ê
            print("\nüîç –ü–ï–†–í–ê–Ø –ü–†–û–í–ï–†–ö–ê:")
            print("-" * 30)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º DeepSeek Settings
            await page.evaluate('''
                () => {
                    const link = document.querySelector('a[data-section="deepseek-settings"]');
                    if (link) link.click();
                }
            ''')
            await page.wait_for_timeout(2000)
            
            first_check = await page.evaluate('''
                () => {
                    const section = document.getElementById('deepseek-settings-section');
                    if (!section) return null;
                    
                    const rect = section.getBoundingClientRect();
                    const style = window.getComputedStyle(section);
                    
                    return {
                        left: rect.left,
                        top: rect.top,
                        position: style.position,
                        display: style.display,
                        properlyPositioned: rect.left >= 250,
                        noWhiteSpace: rect.top < 200
                    };
                }
            ''')
            
            if first_check:
                print(f"üìä DeepSeek Settings (1-—è –ø—Ä–æ–≤–µ—Ä–∫–∞):")
                print(f"   Left: {first_check['left']}px")
                print(f"   Top: {first_check['top']}px")
                print(f"   Position: {first_check['position']}")
                print(f"   –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω: {'‚úÖ' if first_check['properlyPositioned'] else '‚ùå'}")
                print(f"   –ù–µ—Ç –±–µ–ª–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞: {'‚úÖ' if first_check['noWhiteSpace'] else '‚ùå'}")
                
                first_success = first_check['properlyPositioned'] and first_check['noWhiteSpace']
                print(f"   –†–ï–ó–£–õ–¨–¢–ê–¢ 1-–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {'üéâ –£–°–ü–ï–•' if first_success else '‚ùå –ü–†–û–í–ê–õ'}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ —Å–µ–∫—Ü–∏–∏
            sections_to_test = ['conversations', 'triggers', 'templates']
            first_other_results = {}
            
            for section_name in sections_to_test:
                await page.evaluate(f'''
                    () => {{
                        const link = document.querySelector('a[data-section="{section_name}"]');
                        if (link) link.click();
                    }}
                ''')
                await page.wait_for_timeout(1000)
                
                section_check = await page.evaluate(f'''
                    () => {{
                        const section = document.getElementById('{section_name}-section');
                        if (!section) return null;
                        
                        const rect = section.getBoundingClientRect();
                        const style = window.getComputedStyle(section);
                        
                        return {{
                            left: rect.left,
                            position: style.position,
                            display: style.display,
                            properlyPositioned: rect.left >= 250
                        }};
                    }}
                ''')
                
                if section_check:
                    result = "‚úÖ –û–ö" if section_check['properlyPositioned'] else "‚ùå –ü–†–û–ë–õ–ï–ú–ê"
                    print(f"   {section_name}: {result} (left: {section_check['left']}px)")
                    first_other_results[section_name] = section_check['properlyPositioned']
            
            # –í–¢–û–†–ê–Ø –ü–†–û–í–ï–†–ö–ê (—á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã)
            print(f"\n‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –≤—Ç–æ—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π...")
            await page.wait_for_timeout(3000)
            
            print("\nüîç –í–¢–û–†–ê–Ø –ü–†–û–í–ï–†–ö–ê:")
            print("-" * 30)
            
            # –°–Ω–æ–≤–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º DeepSeek Settings
            await page.evaluate('''
                () => {
                    const link = document.querySelector('a[data-section="deepseek-settings"]');
                    if (link) link.click();
                }
            ''')
            await page.wait_for_timeout(2000)
            
            second_check = await page.evaluate('''
                () => {
                    const section = document.getElementById('deepseek-settings-section');
                    if (!section) return null;
                    
                    const rect = section.getBoundingClientRect();
                    const style = window.getComputedStyle(section);
                    
                    return {
                        left: rect.left,
                        top: rect.top,
                        position: style.position,
                        display: style.display,
                        properlyPositioned: rect.left >= 250,
                        noWhiteSpace: rect.top < 200
                    };
                }
            ''')
            
            if second_check:
                print(f"üìä DeepSeek Settings (2-—è –ø—Ä–æ–≤–µ—Ä–∫–∞):")
                print(f"   Left: {second_check['left']}px")
                print(f"   Top: {second_check['top']}px")
                print(f"   Position: {second_check['position']}")
                print(f"   –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω: {'‚úÖ' if second_check['properlyPositioned'] else '‚ùå'}")
                print(f"   –ù–µ—Ç –±–µ–ª–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞: {'‚úÖ' if second_check['noWhiteSpace'] else '‚ùå'}")
                
                second_success = second_check['properlyPositioned'] and second_check['noWhiteSpace']
                print(f"   –†–ï–ó–£–õ–¨–¢–ê–¢ 2-–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {'üéâ –£–°–ü–ï–•' if second_success else '‚ùå –ü–†–û–í–ê–õ'}")
            
            # –°–Ω–æ–≤–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ —Å–µ–∫—Ü–∏–∏
            second_other_results = {}
            
            for section_name in sections_to_test:
                await page.evaluate(f'''
                    () => {{
                        const link = document.querySelector('a[data-section="{section_name}"]');
                        if (link) link.click();
                    }}
                ''')
                await page.wait_for_timeout(1000)
                
                section_check = await page.evaluate(f'''
                    () => {{
                        const section = document.getElementById('{section_name}-section');
                        if (!section) return null;
                        
                        const rect = section.getBoundingClientRect();
                        return {{
                            left: rect.left,
                            properlyPositioned: rect.left >= 250
                        }};
                    }}
                ''')
                
                if section_check:
                    result = "‚úÖ –û–ö" if section_check['properlyPositioned'] else "‚ùå –ü–†–û–ë–õ–ï–ú–ê"
                    print(f"   {section_name}: {result} (left: {section_check['left']}px)")
                    second_other_results[section_name] = section_check['properlyPositioned']
            
            # –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê
            print(f"\n" + "=" * 60)
            print("üéØ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê –î–í–û–ô–ù–û–ô –ü–†–û–í–ï–†–ö–ò")
            print("=" * 60)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            deepseek_consistent = (first_check and second_check and 
                                 first_check['left'] == second_check['left'] and
                                 first_success == second_success)
            
            others_consistent = all(
                first_other_results.get(section) == second_other_results.get(section)
                for section in sections_to_test
            )
            
            print(f"üìä DeepSeek Settings:")
            if first_check and second_check:
                if first_success and second_success:
                    print(f"   üéâ –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–û!")
                    print(f"   ‚úÖ –û–±–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ø–µ—à–Ω—ã")
                    print(f"   ‚úÖ –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {second_check['left']}px (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)")
                    print(f"   ‚úÖ –ë–µ–ª–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–æ")
                elif deepseek_consistent:
                    print(f"   ‚ùå –ü–†–û–ë–õ–ï–ú–ê –û–°–¢–ê–ï–¢–°–Ø")
                    print(f"   ‚ùå –û–±–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é –ø—Ä–æ–±–ª–µ–º—É")
                else:
                    print(f"   ‚ö†Ô∏è –ù–ï–°–¢–ê–ë–ò–õ–¨–ù–û–ï –ü–û–í–ï–î–ï–ù–ò–ï")
                    print(f"   ‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–æ–∫ —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è")
            
            print(f"\nüìä –î—Ä—É–≥–∏–µ —Å–µ–∫—Ü–∏–∏:")
            all_others_ok = all(second_other_results.values())
            if all_others_ok:
                print(f"   üéâ –í–°–ï –°–ï–ö–¶–ò–ò –†–ê–ë–û–¢–ê–Æ–¢ –ü–†–ê–í–ò–õ–¨–ù–û!")
                for section in sections_to_test:
                    print(f"   ‚úÖ {section}")
            else:
                print(f"   ‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –°–ï–ö–¶–ò–ò –ò–ú–ï–Æ–¢ –ü–†–û–ë–õ–ï–ú–´:")
                for section, ok in second_other_results.items():
                    status = "‚úÖ" if ok else "‚ùå"
                    print(f"   {status} {section}")
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤–µ—Ä–¥–∏–∫—Ç
            all_perfect = (first_success and second_success and 
                          deepseek_consistent and all_others_ok)
            
            print(f"\nüèÜ –§–ò–ù–ê–õ–¨–ù–´–ô –í–ï–†–î–ò–ö–¢:")
            if all_perfect:
                print(f"   üéâüéâüéâ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–û –ù–ê 100%! üéâüéâüéâ")
                print(f"   ‚úÖ DeepSeek Settings —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ")
                print(f"   ‚úÖ –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
                print(f"   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç–∞–±–∏–ª—å–Ω—ã –∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã")
            else:
                print(f"   ‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –†–ê–ë–û–¢–ê")
                if not (first_success and second_success):
                    print(f"   ‚ùå DeepSeek Settings –≤—Å–µ –µ—â–µ –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã")
                if not all_others_ok:
                    print(f"   ‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥—Ä—É–≥–∏–µ —Å–µ–∫—Ü–∏–∏ –∏–º–µ—é—Ç –ø—Ä–æ–±–ª–µ–º—ã")
                if not deepseek_consistent:
                    print(f"   ‚ùå –ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ")
            
            # –°–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            await page.evaluate('''
                () => {
                    const link = document.querySelector('a[data-section="deepseek-settings"]');
                    if (link) link.click();
                }
            ''')
            await page.wait_for_timeout(1000)
            await page.screenshot(path="double_verification_result.png", full_page=True)
            print(f"\nüì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: double_verification_result.png")
            
            await page.wait_for_timeout(5000)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–≤–æ–π–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        finally:
            await browser.close()

if __name__ == "__main__":
    asyncio.run(double_verification())
